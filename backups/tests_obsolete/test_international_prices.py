#!/usr/bin/env python3
"""
Script de prueba para InternationalPriceService
Prueba Yahoo Finance y Finnhub con s√≠mbolos reales
"""

import asyncio
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.international_prices import InternationalPriceService

async def test_international_prices():
    """Prueba el servicio de precios internacionales"""
    print("üß™ Probando InternationalPriceService")
    print("=" * 50)
    
    # Crear instancia directa (compatible con DI)
    international_price_service = InternationalPriceService()
    
    # S√≠mbolos de prueba (los que tienes en tu portfolio)
    test_symbols = ["TSLA", "PLTR", "AMD", "AAPL"]
    
    # 1. Probar Finnhub (√∫nica fuente disponible)
    print("1Ô∏è‚É£ Probando Finnhub...")
    try:
        result = await international_price_service.get_stock_price("TSLA", "finnhub")
        
        if result:
            print("‚úÖ Finnhub funcionando:")
            print(f"   S√≠mbolo: {result['symbol']}")
            print(f"   Precio: ${result['price']:.2f} USD")
            print(f"   Fuente: {result['source']}")
            print(f"   Timestamp: {result['timestamp']}")
        else:
            print("‚ùå Finnhub fall√≥")
            
    except Exception as e:
        print(f"‚ùå Error con Finnhub: {e}")
    
    # 2. Probar Finnhub (si est√° configurado)
    print("\n2Ô∏è‚É£ Probando Finnhub...")
    finnhub_key = os.getenv("FINNHUB_API_KEY")
    
    if finnhub_key:
        try:
            result = await international_price_service.get_stock_price("TSLA", "finnhub")
            
            if result:
                print("‚úÖ Finnhub funcionando:")
                print(f"   S√≠mbolo: {result['symbol']}")
                print(f"   Precio: ${result['price']:.2f} USD")
                print(f"   Fuente: {result['source']}")
                print(f"   M√°ximo d√≠a: ${result.get('day_high', 'N/A')}")
                print(f"   M√≠nimo d√≠a: ${result.get('day_low', 'N/A')}")
            else:
                print("‚ùå Finnhub fall√≥")
                
        except Exception as e:
            print(f"‚ùå Error con Finnhub: {e}")
    else:
        print("‚ö†Ô∏è  FINNHUB_API_KEY no configurada - saltando prueba")
        print("üí° Para probar Finnhub:")
        print("   1. Reg√≠strate en https://finnhub.io")
        print("   2. export FINNHUB_API_KEY=tu_api_key")
    
    # 3. Probar m√∫ltiples s√≠mbolos
    print("\n3Ô∏è‚É£ Probando m√∫ltiples s√≠mbolos...")
    try:
        prices = await international_price_service.get_multiple_prices(test_symbols[:3])  # Solo 3 para no agotar l√≠mites
        
        print("üìä Resultados m√∫ltiples:")
        for symbol, data in prices.items():
            if data:
                print(f"   ‚úÖ {symbol}: ${data['price']:.2f} USD ({data['source']})")
            else:
                print(f"   ‚ùå {symbol}: Error obteniendo precio")
                
    except Exception as e:
        print(f"‚ùå Error con m√∫ltiples s√≠mbolos: {e}")
    
    # 4. Estado de fuentes
    print("\n4Ô∏è‚É£ Estado de fuentes:")
    sources = international_price_service.get_available_sources()
    for source, available in sources.items():
        status = "‚úÖ Disponible" if available else "‚ùå No disponible"
        print(f"   {source}: {status}")
    
    print("\n" + "=" * 50)
    print("üéØ Prueba de precios internacionales completada")
    
    return True

if __name__ == "__main__":
    asyncio.run(test_international_prices())