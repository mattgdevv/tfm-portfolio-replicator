#!/usr/bin/env python3
"""
‚ùå DEPRECATED: Test roto por migraci√≥n a DI estricto

Script de prueba para VariationAnalyzer
Prueba el an√°lisis de variaciones de CEDEARs vs subyacentes

TODO: Migrar usando build_services() para DI estricto
"""

# ‚ùå ROTO POR MIGRACION DI: Este test usa imports legacy incompatibles
# üí° Para migrar: usar build_services() en lugar de variation_analyzer global
# üìç Referencia hist√≥rica: muestra an√°lisis de variaciones antes de DI estricto

import asyncio
import sys
import os

def main():
    """Test marcado como deprecated - requiere migraci√≥n a DI"""
    raise RuntimeError("Test roto por migraci√≥n DI - usar build_services() en lugar de variation_analyzer global")

if __name__ == "__main__":
    main()

# ‚ùå CODIGO LEGACY COMENTADO:
# # Agregar el directorio ra√≠z al path
# sys.path.append(os.path.dirname(os.path.abspath(__file__)))
# 
# from app.services.variation_analyzer import variation_analyzer, VariationAnalyzer  # ‚ùå YA NO EXISTE
# from app.integrations.iol import IOLIntegration

async def test_variation_analyzer():
    """Prueba el analizador de variaciones"""
    print("üß™ Probando VariationAnalyzer")
    print("=" * 50)
    
    # S√≠mbolos de prueba
    test_symbols = ["TSLA", "AAPL"]  # Comenzar con pocos para probar
    
    # 1. Probar modo limitado (sin IOL)
    print("1Ô∏è‚É£ Probando modo LIMITADO (precios te√≥ricos)...")
    analyzer_limited = VariationAnalyzer()  # Sin sesi√≥n IOL
    
    try:
        analysis = await analyzer_limited.analyze_single_variation("TSLA")
        
        if analysis:
            print("‚úÖ An√°lisis de variaci√≥n completado:")
            print(analyzer_limited.format_detailed_analysis(analysis))
        else:
            print("‚ùå No se pudo completar el an√°lisis de variaci√≥n")
            
    except Exception as e:
        print(f"‚ùå Error en modo limitado: {e}")
    
    # 2. Probar m√∫ltiples s√≠mbolos
    print("\n2Ô∏è‚É£ Probando m√∫ltiples s√≠mbolos (modo limitado)...")
    try:
        analyses = await analyzer_limited.analyze_portfolio_variations(test_symbols)
        
        if analyses:
            print("‚úÖ An√°lisis m√∫ltiple completado:")
            print(analyzer_limited.format_variation_report(analyses))
        else:
            print("‚ùå No se pudieron completar los an√°lisis")
            
    except Exception as e:
        print(f"‚ùå Error con m√∫ltiples s√≠mbolos: {e}")
    
    # 3. Probar modo completo (con IOL) - opcional
    print("\n3Ô∏è‚É£ Probando modo COMPLETO (con IOL)...")
    
    test_iol = input("¬øProbar con autenticaci√≥n IOL? (s/n): ").strip().lower()
    
    if test_iol == 's':
        try:
            # Solicitar credenciales
            username = input("Usuario IOL: ").strip()
            password = input("Contrase√±a IOL: ").strip()
            
            if username and password:
                # Autenticar
                iol_integration = IOLIntegration()
                await iol_integration.authenticate(username, password)
                
                # Crear analizador con sesi√≥n IOL
                analyzer_full = VariationAnalyzer(iol_integration.session)
                
                print("üîê Autenticado con IOL - probando modo completo...")
                
                analysis = await analyzer_full.analyze_single_variation("TSLA")
                
                if analysis:
                    print("‚úÖ An√°lisis con IOL completado:")
                    print(analyzer_full.format_detailed_analysis(analysis))
                else:
                    print("‚ùå No se pudo completar el an√°lisis con IOL")
            else:
                print("‚ö†Ô∏è  Credenciales no proporcionadas - saltando prueba IOL")
                
        except Exception as e:
            print(f"‚ùå Error con modo IOL: {e}")
    else:
        print("‚ö†Ô∏è  Saltando prueba con IOL")
    
    print("\n" + "=" * 50)
    print("üéØ Prueba de VariationAnalyzer completada")
    print("üí° El analizador est√° listo para integrarse en el PortfolioProcessor")
    
    return True

if __name__ == "__main__":
    asyncio.run(test_variation_analyzer())