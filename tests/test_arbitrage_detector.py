#!/usr/bin/env python3
"""
‚ùå DEPRECATED: Test roto por migraci√≥n a DI estricto

Script de prueba para ArbitrageDetector
Prueba la detecci√≥n de arbitraje entre CEDEARs y subyacentes

TODO: Migrar usando build_services() para DI estricto
"""

# ‚ùå ROTO POR MIGRACION DI: Este test usa imports legacy incompatibles
# üí° Para migrar: usar build_services() en lugar de arbitrage_detector global
# üìç Referencia hist√≥rica: muestra como funcionaba el arbitrage detector antes de DI estricto

import asyncio
import sys
import os

def main():
    """Test marcado como deprecated - requiere migraci√≥n a DI"""
    raise RuntimeError("Test roto por migraci√≥n DI - usar build_services() en lugar de arbitrage_detector global")

if __name__ == "__main__":
    main()

# ‚ùå CODIGO LEGACY COMENTADO:
# # Agregar el directorio ra√≠z al path
# sys.path.append(os.path.dirname(os.path.abspath(__file__)))
# 
# from app.services.arbitrage_detector import arbitrage_detector, ArbitrageDetector  # ‚ùå YA NO EXISTE
# from app.integrations.iol import IOLIntegration

async def test_arbitrage_detector():
    """Prueba el detector de arbitraje"""
    print("üß™ Probando ArbitrageDetector")
    print("=" * 50)
    
    # S√≠mbolos de prueba
    test_symbols = ["TSLA", "PLTR", "AMD"]
    
    # 1. Probar modo limitado (sin IOL)
    print("1Ô∏è‚É£ Probando modo LIMITADO (precios te√≥ricos)...")
    detector_limited = ArbitrageDetector()  # Sin sesi√≥n IOL
    
    try:
        opportunity = await detector_limited.detect_single_arbitrage("TSLA", threshold_percentage=0.01)  # 1% threshold para testing
        
        if opportunity:
            print("‚úÖ Oportunidad detectada en modo limitado:")
            print(detector_limited.format_alert(opportunity))
        else:
            print("‚ÑπÔ∏è  No se detect√≥ oportunidad significativa para TSLA")
            
    except Exception as e:
        print(f"‚ùå Error en modo limitado: {e}")
    
    # 2. Probar m√∫ltiples s√≠mbolos en modo limitado
    print("\n2Ô∏è‚É£ Probando m√∫ltiples s√≠mbolos (modo limitado)...")
    try:
        opportunities = await detector_limited.detect_portfolio_arbitrages(test_symbols, threshold_percentage=0.01)
        
        if opportunities:
            print(f"‚úÖ {len(opportunities)} oportunidades detectadas:")
            for opp in opportunities:
                print(f"   üìä {opp.symbol}: {opp.difference_percentage:.1%} ({opp.difference_usd:+.2f} USD)")
        else:
            print("‚ÑπÔ∏è  No se detectaron oportunidades significativas")
            
    except Exception as e:
        print(f"‚ùå Error con m√∫ltiples s√≠mbolos: {e}")
    
    # 3. Probar modo completo (con IOL) - opcional
    print("\n3Ô∏è‚É£ Probando modo COMPLETO (con IOL)...")
    
    # Preguntar si quiere probar con IOL
    test_iol = input("¬øProbar con autenticaci√≥n IOL? (s/n): ").strip().lower()
    
    if test_iol == 's':
        try:
            # Solicitar credenciales
            username = input("Usuario IOL: ").strip()
            password = input("Contrase√±a IOL: ").strip()
            
            if username and password:
                # Autenticar
                iol_integration = IOLIntegration()
                await iol_integration.authenticate(username, password)
                
                # Crear detector con sesi√≥n IOL
                detector_full = ArbitrageDetector(iol_integration.session)
                
                print("üîê Autenticado con IOL - probando modo completo...")
                
                opportunity = await detector_full.detect_single_arbitrage("TSLA", threshold_percentage=0.01)
                
                if opportunity:
                    print("‚úÖ Oportunidad detectada en modo completo:")
                    print(detector_full.format_alert(opportunity))
                    print("\nüìä Comparaci√≥n de modos:")
                    print(f"   üü° Te√≥rico: ${opportunity.cedear_price_usd:.2f} USD")
                    print(f"   üî¥ Real IOL: Disponible en modo completo")
                else:
                    print("‚ÑπÔ∏è  No se detect√≥ oportunidad significativa con IOL")
            else:
                print("‚ö†Ô∏è  Credenciales no proporcionadas - saltando prueba IOL")
                
        except Exception as e:
            print(f"‚ùå Error con modo IOL: {e}")
    else:
        print("‚ö†Ô∏è  Saltando prueba con IOL")
    
    # 4. Mostrar ejemplo de alerta formateada
    print("\n4Ô∏è‚É£ Ejemplo de alerta formateada:")
    
    # Crear oportunidad de ejemplo para demostrar formato
    from app.services.arbitrage_detector import ArbitrageOpportunity
    
    example_opp = ArbitrageOpportunity(
        symbol="TSLA",
        cedear_price_usd=280.50,
        underlying_price_usd=309.83,
        difference_usd=29.33,
        difference_percentage=0.095,  # 9.5%
        ccl_rate=1362.14,
        cedear_price_ars=382000,
        iol_session_active=False
    )
    
    print(detector_limited.format_alert(example_opp))
    
    print("\n" + "=" * 50)
    print("üéØ Prueba de ArbitrageDetector completada")
    print("üí° El detector est√° listo para integrarse en el PortfolioProcessor")
    
    return True

if __name__ == "__main__":
    asyncio.run(test_arbitrage_detector())